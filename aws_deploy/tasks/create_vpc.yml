---
- name: Create AWS VPC {{ ec2_name_prefix }}-vpc
  ec2_vpc_net:
    name: "{{ ec2_name_prefix }}-vpc"
    cidr_block:
      - "{{ec2_subnet}}"
      - "{{ec2_subnet2}}"
    region: "{{ ec2_region }}"
  register: create_vpc
  until: create_vpc is not failed
  retries: 5

- name: create file for all AWS security group rules
  template:
    src: vpc_rules.j2
    dest: "{{playbook_dir}}/{{ ec2_name_prefix }}/aws_rules.yml"
  delegate_to: localhost
  run_once: true

- include_vars:
    file: "{{playbook_dir}}/{{ ec2_name_prefix }}/aws_rules.yml"

- name: Create EC2 security group for VPC named {{ ec2_name_prefix }}-vpc
  ec2_group:
    name: "{{ ec2_name_prefix }}-insecure_all"
    description: all ports open
    region: "{{ ec2_region }}"
    vpc_id: "{{create_vpc.vpc.id}}"
    rules: "{{ all_rules }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
    tags:
      Username: "{{ aws_user }}"
      Info: "Username that provisioned this-> {{ aws_user }}"
      lab_prefix: "{{ ec2_name_prefix }}"
  register: create_sg
  until: create_sg is not failed
  retries: 5

- name: Create subnet for {{ ec2_name_prefix }}-vpc
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ ec2_az1 }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    cidr: "{{ ec2_subnet }}"
    wait_timeout: 600
    resource_tags:
      Name: "{{ ec2_name_prefix }}-subnet"
  register: create_subnet
  until: create_subnet is not failed
  retries: 15

- name: Create subnet2 for {{ ec2_name_prefix }}-vpc
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ ec2_az2 }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    cidr: "{{ ec2_subnet2 }}"
    wait_timeout: 600
    resource_tags:
      Name: "{{ ec2_name_prefix }}-subnet2"
  register: create_subnet2
  until: create_subnet2 is not failed
  retries: 15

- name: vpc internet gateway is present for {{ create_vpc.vpc.id }}
  ec2_vpc_igw:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    tags:
      Username: "{{ aws_user }}"
      Info: "Username that provisioned this-> {{ aws_user }}"
      lab_prefix: "{{ ec2_name_prefix }}"
  register: igw
  until: igw is not failed
  retries: 15

- name: vpc nat gateway is present for {{ create_vpc.vpc.id }}
  ec2_vpc_nat_gateway:
    region: "{{ ec2_region }}"
    subnet_id: "{{ create_subnet.subnet.id }}"
    wait: yes
    tags:
      Username: "{{ aws_user }}"
      Info: "Username that provisioned this-> {{ aws_user }}"
      lab_prefix: "{{ ec2_name_prefix }}"
  register: natgateway
  until: natgateway is not failed
  retries: 5

- name: vpc public subnet route table is present for {{ create_vpc.vpc.id }}
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    subnets:
      - "{{ create_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
  register: routetable
  until: routetable is not failed
  retries: 5

- name: vpc public subnet2 route table is present for {{ create_vpc.vpc.id }}
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ create_vpc.vpc.id }}"
    subnets:
      - "{{ create_subnet2.subnet.id }}"
    routes:
      - gateway_id: "{{ natgateway.nat_gateway_id }}"
        dest: 0.0.0.0/0
  register: routetable2
  until: routetable2 is not failed
  retries: 5

- name: set variables for instance creation dynamically since VPC was not supplied by user
  set_fact:
    ec2_vpc_id: "{{ create_vpc.vpc.id }}"
    ec2_security_group: "{{ ec2_name_prefix }}-insecure_all"
    ec2_vpc_subnet_id: "{{ create_subnet.subnet.id }}"
    ec2_vpc_subnet2_id: "{{ create_subnet2.subnet.id }}"
    ec2_vpc_nat_gateway: "{{ natgateway.nat_gateway_id}}"

- name: debugging all variables for ec2 instance creation VPC-1
  debug:
    msg:
      - "ec2_name_prefix: {{ ec2_name_prefix }}"
      - "ec2_security_group: {{ ec2_name_prefix }}-insecure_all"
      - "ec2_vpc_id: {{ ec2_vpc_id }}"
      - "ec2_vpc_subnet_id: {{ ec2_vpc_subnet_id }}"
      - "ec2_vpc_subnet2_id: {{ ec2_vpc_subnet2_id }}"
      - "ec2_vpc_nat_gateway: {{ ec2_vpc_nat_gateway }}"

- name: Create ssh key pair for workshop {{ ec2_name_prefix }}
  ec2_key:
    name: "{{ ec2_name_prefix }}-key"
    region: "{{ ec2_region }}"
  register: create_key

- name: save private key
  copy:
    content: "{{ create_key.key.private_key }}"
    dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    mode: '0400'
  when: create_key.changed

- name: Ensure key file has proper permissions
  file:
    dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}/{{ ec2_name_prefix }}-private.pem"
    mode: 0600
