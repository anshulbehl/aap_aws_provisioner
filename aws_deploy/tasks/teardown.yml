- name: set keys for instance creation dynamically since key was not supplied by user
  set_fact:
    ec2_key_name: "{{ ec2_name_prefix }}-key"

- name: delete ssh key pair for workshop {{ ec2_name_prefix }}
  ec2_key:
    name: "{{ec2_key_name}}"
    region: "{{ ec2_region }}"
    state: absent

- name: Get the VPC ID for {{ ec2_name_prefix }}
  ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ ec2_name_prefix }}-vpc"
    region: "{{ ec2_region }}"
  register: vpc_net_facts

- name: use set fact for easier variables
  set_fact:
    ec2_vpc_id: "{{vpc_net_facts.vpcs[0].id|default('WORKSHOP_UNDEF')}}"
    ec2_security_group: "{{ ec2_name_prefix }}-insecure_all"
  when: ec2_security_group is undefined

- name: debug vpc_net_facts
  debug:
    var: vpc_net_facts

- name: Get the NAT ID for {{ ec2_name_prefix }}
  ec2_vpc_nat_gateway_info:
    filters:
      state: ['available']
      "tag:lab_prefix": "{{ ec2_name_prefix }}"
    region: "{{ ec2_region }}"
  register: nat_net_facts

- name: debug nat_net_facts
  debug:
    var: nat_net_facts

- name: delete nat gateway
  ec2_vpc_nat_gateway:
    nat_gateway_id: "{{item.nat_gateway_id}}"
    release_eip: yes
    state: absent
    wait: yes
  with_items: "{{nat_net_facts.result}}"
  when: nat_net_facts.result|length > 0

- name: grab route information for {{ ec2_name_prefix }} on {{ ec2_region }}
  ec2_vpc_route_table_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ec2_vpc_id}}"
  register: route_table_facts

- name: vpc public subnet route table is deleted
  ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ec2_vpc_id}}"
    route_table_id: "{{item.id}}"
    lookup: id
    state: absent
  with_items: "{{route_table_facts.route_tables}}"
  when: item.associations[0].main != True

- name: grab vpc node facts for workshop
  ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      "vpc-id": "{{ec2_vpc_id}}"
  register: all_workshop_vpc_nodes

- name: debug all_workshop_vpc_nodes
  debug:
    var: all_workshop_vpc_nodes

- name: destroy EC2 instances
  ec2:
    region: "{{ ec2_region }}"
    state: absent
    instance_ids: "{{ all_workshop_vpc_nodes.instances | map(attribute='instance_id') | list }}"
    wait: true
    wait_timeout: "{{ 300 | int}}"
  register: result_ec2_destroy
  when: all_workshop_vpc_nodes.instances

- name: debug result_ec2_destroy
  debug:
    var: result_ec2_destroy

#delete subnets
- name: Delete subnet1 for {{ ec2_name_prefix }}-vpc
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ec2_az1}}"
    vpc_id: "{{ec2_vpc_id}}"
    cidr: "{{ec2_subnet}}"
    state: absent

- name: Delete subnet2 for {{ ec2_name_prefix }}-vpc
  ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ec2_az2}}"
    vpc_id: "{{ec2_vpc_id}}"
    cidr: "{{ec2_subnet2}}"
    state: absent

- name: Deleted EC2 security group for VPC vpc-{{ ec2_name_prefix }}
  ec2_group:
    name: "{{ec2_security_group}}"
    region: "{{ ec2_region }}"
    vpc_id: "{{ec2_vpc_id}}"
    state: absent
  register: delete_sg
  until: delete_sg is not failed
  retries: 50
  when: vpc_net_facts.vpcs|length > 0

- name: vpc internet gateway is deleted for vpc-{{ ec2_name_prefix }}
  ec2_vpc_igw:
    region: "{{ ec2_region }}"
    vpc_id: "{{ec2_vpc_id}}"
    state: absent

# delete VPCS
- name: delete AWS VPC {{ ec2_name_prefix }}
  ec2_vpc_net:
    name: "{{ ec2_name_prefix }}-vpc"
    cidr_block:
      - "{{ ec2_subnet }}"
      - "{{ ec2_subnet2 }}"
    region: "{{ ec2_region }}"
    state: absent
